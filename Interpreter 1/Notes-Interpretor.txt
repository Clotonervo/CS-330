Interpretors

using Revise

push! (LOAD_PATH, pwd())

using Lexer
Lexer.lex("42")


AD::= ( OP AE AE)
	| num
OP::= + | -

************************************************ First Draft RudInt
#
# Class Interpreter 0
# Base interpreter with numbers, plus, and minus
#

module RudInt

push!(LOAD_PATH, pwd())

using Error
using Lexer
export parse, calc, interp

#
# ==================================================
#

abstract type AE
end

# <AE> ::= <number>
struct NumNode <: AE
    n::Real
end

# <AE> ::= (x <AE> <AE>)
struct BinopNode <: AE
	op::Function
    lhs::AE
    rhs::AE
end

# <AE> ::= (x <AE> <AE>)
struct UnaryNode <: AE
	op::Function
	num::AE
end


function Dict(op::Symbol)
	if op == :+
		return +
	elseif op == :-
		return -
	elseif op == :*
		return *
	elseif op == :/
		return /
	elseif op == :mod
		return mod
	elseif op == :collatz
		return collatz
	end
end

#
# ==================================================
#

function collatz( n::Real )
  return collatz_helper( n, 0 )
end

function collatz_helper( n::Real, num_iters::Int )
  if n == 1
    return num_iters
  end
  if mod(n,2)==0
    return collatz_helper( n/2, num_iters+1 )
  else
    return collatz_helper( 3*n+1, num_iters+1 )
  end
end

#
# ==================================================
#

function parse( expr::Number )
    return NumNode( expr )
end

function parse( expr::Array{Any} )
	if length( expr ) > 3
        throw( LispError( "Too many arguments!" ) )
	end

	operator = Dict( expr[1] )
    if operator == +
        return BinopNode( +, parse( expr[2] ), parse( expr[3] ) )
	elseif operator == -
		if length( expr ) == 2
			return UnaryNode( -, parse( expr[2] ) )
		elseif length( expr ) == 3
			return BinopNode( -, parse( expr[2] ), parse( expr[3] ) )
		end
	elseif operator == *
		return BinopNode( *, parse( expr[2] ), parse( expr[3] ) )
	elseif operator == /
		return BinopNode( /, parse( expr[2] ), parse( expr[3] ) )
	elseif operator == mod
		return BinopNode( mod, parse( expr[2] ), parse( expr[3] ) )
	elseif operator == collatz
		if length( expr ) > 2
			throw( LispError( "Too many arguments for collatz!") )
		elseif length( expr ) < 2
			throw( LispError( "Too few arguments for collatz!") )
		else
			return UnaryNode( collatz, parse( expr[2] ) )
		end
    end
    throw( LispError("Unknown operator!") )
end

function parse( expr::Any )
  throw( LispError("Invalid type $expr") )
end

#
# ==================================================
#

function calc( ast::NumNode )
    return ast.n
end

function calc( ast::BinopNode )
	if ast.op == +
		return calc( ast.lhs ) + calc( ast.rhs )
	elseif ast.op == -
		return calc( ast.lhs ) - calc( ast.rhs )
	elseif ast.op == *
		return calc( ast.lhs ) * calc( ast.rhs )
	elseif ast.op == /
		if calc( ast.rhs ) == 0
			throw( LispError("Undefined: can't divide by 0!") )
		else
			return calc( ast.lhs ) / calc( ast.rhs )
		end
	elseif ast.op == mod
		return mod( calc( ast.lhs ), calc( ast.rhs ) )
	end
end

function calc( ast::UnaryNode)
	if ast.op == collatz
		if calc( ast.num ) < 0
			throw( LispError("Tried to collatz with a negative number!") )
		else
			return collatz( calc( ast.num ) )
		end
	elseif ast.op == -
		return 0 - calc( ast.num )
	end
end



#
# ==================================================
#

function interp( cs::AbstractString )
    lxd = Lexer.lex( cs )
    ast = parse( lxd )
    return calc( ast )
end

end #module
